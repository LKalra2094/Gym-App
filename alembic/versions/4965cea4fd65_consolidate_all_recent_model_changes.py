"""Consolidate all recent model changes

Revision ID: 4965cea4fd65
Revises: 55b733f4ba95
Create Date: 2025-06-25 23:17:42.130049

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4965cea4fd65'
down_revision: Union[str, None] = '55b733f4ba95'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop exercise_logs which depends on exercises and users
    op.drop_index(op.f('ix_exercise_logs_id'), table_name='exercise_logs')
    op.drop_table('exercise_logs')

    # Drop exercises which depends on workouts
    op.drop_index(op.f('ix_exercises_id'), table_name='exercises')
    op.drop_index(op.f('ix_exercises_slug'), table_name='exercises')
    op.drop_table('exercises')

    # Drop workouts which depends on users
    op.drop_index(op.f('ix_workouts_id'), table_name='workouts')
    op.drop_index(op.f('ix_workouts_slug'), table_name='workouts')
    op.drop_table('workouts')

    # Drop users which has no dependencies
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exercises',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('workout_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['workout_id'], ['workouts.id'], name='exercises_workout_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exercises_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_exercises_slug'), 'exercises', ['slug'], unique=True)
    op.create_index(op.f('ix_exercises_id'), 'exercises', ['id'], unique=False)
    op.create_table('exercise_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('exercise_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('weight_unit', postgresql.ENUM('KG', 'LBS', name='weightunit'), autoincrement=False, nullable=False),
    sa.Column('reps', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sets', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercises.id'], name=op.f('exercise_logs_exercise_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('exercise_logs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('exercise_logs_pkey'))
    )
    op.create_index(op.f('ix_exercise_logs_id'), 'exercise_logs', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('USER', 'ADMIN', name='userrole'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verification_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reset_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reset_token_expires', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('preferred_weight_unit', postgresql.ENUM('KG', 'LBS', name='weightunit'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('workouts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('workouts_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workouts_pkey'))
    )
    op.create_index(op.f('ix_workouts_slug'), 'workouts', ['slug'], unique=True)
    op.create_index(op.f('ix_workouts_id'), 'workouts', ['id'], unique=False)
    # ### end Alembic commands ###
